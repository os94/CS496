/**
 * Callback for an event
 *
 * @export
 * @interface EventCallback
 */
export interface EventCallback {
    (key: any): any;
}
/**
 * Handles events
 *
 * @export
 * @class EventHandler
 */
export declare class EventHandler {
    type: any;
    /**
     * Collection of event callbacks. The event name is the key
     *
     * @private
     * @type {EventCallback[]}
     * @memberOf EventHandler
     */
    private events;
    /**
     * Creates an instance of EventHandler.
     * @param {*} [type=null] Type of object
     *
     * @memberOf EventHandler
     */
    constructor(type?: any);
    /**
     * Register an event
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to invoke
     *
     * @memberOf EventHandler
     */
    register(event: string, callback: EventCallback): void;
    /**
     * Remove a callback for an event
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to remove
     *
     * @memberOf EventHandler
     */
    unregister(event: string, callback: EventCallback): void;
    /**
     * Invoke callbacks for an event
     *
     * @param {string} event Event name
     *
     * @memberOf EventHandler
     */
    fire(event: string): void;
}
