"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Handles events
 *
 * @export
 * @class EventHandler
 */
var EventHandler = (function () {
    /**
     * Creates an instance of EventHandler.
     * @param {*} [type=null] Type of object
     *
     * @memberOf EventHandler
     */
    function EventHandler(type) {
        if (type === void 0) { type = null; }
        this.type = type;
        /**
         * Collection of event callbacks. The event name is the key
         *
         * @private
         * @type {EventCallback[]}
         * @memberOf EventHandler
         */
        this.events = [];
    }
    /**
     * Register an event
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to invoke
     *
     * @memberOf EventHandler
     */
    EventHandler.prototype.register = function (event, callback) {
        this.events[event] = this.events[event] || [];
        this.events[event].push(callback);
    };
    /**
     * Remove a callback for an event
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to remove
     *
     * @memberOf EventHandler
     */
    EventHandler.prototype.unregister = function (event, callback) {
        var _this = this;
        if (this.events[event] != null) {
            this.events[event].forEach(function (cb, i) {
                if (cb === callback)
                    _this.events[event][i] = null;
            });
        }
    };
    /**
     * Invoke callbacks for an event
     *
     * @param {string} event Event name
     *
     * @memberOf EventHandler
     */
    EventHandler.prototype.fire = function (event) {
        var _this = this;
        if (this.events[event] != null) {
            this.events[event].forEach(function (cb) {
                if (typeof cb === 'function')
                    cb(_this.type);
            });
        }
    };
    return EventHandler;
}());
exports.EventHandler = EventHandler;
