import { EventHandler, EventCallback } from "./EventHandler";
/**
 * Object for handling object and global events
 *
 * @export
 * @class $events
 */
export declare class $events {
    static $eventHandlers: EventHandler[];
    private $eventHandler;
    /**
     * Creates an instance of $events.
     * @param {string} [type=null] Key for object type
     *
     * @memberOf $events
     */
    constructor(type?: string);
    /**
     * Fire event for all $event objects
     *
     * @static
     * @param {any} event Event name
     *
     * @memberOf $events
     */
    static $broadcast(event: any): void;
    /**
     * Fire event for all $event objects of a specific type
     *
     * @static
     * @param {string} event Event name
     * @param {*} type Object type
     *
     * @memberOf $events
     */
    static $broadcastTo(event: string, type: any): void;
    /**
     * Extend object prototype to be an $events
     *
     * @static
     * @param {Function} obj Object to extend
     *
     * @memberOf $events
     */
    static $extend(obj: Function): void;
    /**
     * Emit an event to this object
     *
     * @param {string} event Event name
     *
     * @memberOf $events
     */
    $emit(event: string): void;
    /**
     * Add a callback to an event
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to invoke
     *
     * @memberOf $events
     */
    $on(event: string, callback: EventCallback): void;
    /**
     * Add a callback to an event that fires once
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to invoke once
     *
     * @memberOf $events
     */
    $once(event: string, callback: EventCallback): void;
    /**
     * Destroy all event listeners for this object
     *
     *
     * @memberOf $events
     */
    $destroy(): void;
    /**
     * Remove a specific callback for an event
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to remove
     *
     * @memberOf $events
     */
    $remove(event: string, callback: EventCallback): void;
}
