"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventHandler_1 = require("./EventHandler");
/**
 * Object for handling object and global events
 *
 * @export
 * @class $events
 */
var $events = (function () {
    /**
     * Creates an instance of $events.
     * @param {string} [type=null] Key for object type
     *
     * @memberOf $events
     */
    function $events(type) {
        if (type === void 0) { type = null; }
        this.$eventHandler = new EventHandler_1.EventHandler(type);
        $events.$eventHandlers.push(this.$eventHandler);
    }
    /**
     * Fire event for all $event objects
     *
     * @static
     * @param {any} event Event name
     *
     * @memberOf $events
     */
    $events.$broadcast = function (event) {
        $events.$eventHandlers.forEach(function (handler) {
            handler.fire(event);
        });
    };
    /**
     * Fire event for all $event objects of a specific type
     *
     * @static
     * @param {string} event Event name
     * @param {*} type Object type
     *
     * @memberOf $events
     */
    $events.$broadcastTo = function (event, type) {
        $events.$eventHandlers.forEach(function (handler) {
            if (handler.type === type) {
                handler.fire(event);
            }
        });
    };
    /**
     * Extend object prototype to be an $events
     *
     * @static
     * @param {Function} obj Object to extend
     *
     * @memberOf $events
     */
    $events.$extend = function (obj) {
        if (typeof obj === 'function') {
            var proto = obj.prototype;
            obj.prototype = Object.create($events.prototype);
            for (var key in proto) {
                obj.prototype[key] = proto[key];
            }
            Object.defineProperty(obj.prototype, 'constructor', {
                enumerable: false,
                value: obj
            });
        }
    };
    /**
     * Emit an event to this object
     *
     * @param {string} event Event name
     *
     * @memberOf $events
     */
    $events.prototype.$emit = function (event) {
        this.$eventHandler.fire(event);
    };
    /**
     * Add a callback to an event
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to invoke
     *
     * @memberOf $events
     */
    $events.prototype.$on = function (event, callback) {
        this.$eventHandler.register(event, callback);
    };
    /**
     * Add a callback to an event that fires once
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to invoke once
     *
     * @memberOf $events
     */
    $events.prototype.$once = function (event, callback) {
        var _this = this;
        var cb = function (key) {
            callback(key);
            _this.$remove(event, cb);
        };
        this.$on(event, cb);
    };
    /**
     * Destroy all event listeners for this object
     *
     *
     * @memberOf $events
     */
    $events.prototype.$destroy = function () {
        var _this = this;
        var newHandler = new EventHandler_1.EventHandler();
        $events.$eventHandlers.forEach(function (handler, i) {
            if (handler === _this.$eventHandler) {
                $events.$eventHandlers[i] = newHandler;
            }
        });
        this.$eventHandler = newHandler;
    };
    /**
     * Remove a specific callback for an event
     *
     * @param {string} event Event name
     * @param {EventCallback} callback Callback to remove
     *
     * @memberOf $events
     */
    $events.prototype.$remove = function (event, callback) {
        this.$eventHandler.unregister(event, callback);
    };
    return $events;
}());
$events.$eventHandlers = [];
exports.$events = $events;
